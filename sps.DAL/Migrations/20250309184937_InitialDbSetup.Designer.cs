// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sps.DAL.DataModel;

#nullable disable

namespace sps.DAL.Migrations
{
    [DbContext(typeof(SpsDbContext))]
    [Migration("20250309184937_InitialDbSetup")]
    partial class InitialDbSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("sps.Domain.Model.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OpkvalSupervisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpsaCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("CommentText", "sps.Domain.Model.Entities.Comment.CommentText#SensitiveString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("OpkvalSupervisionId");

                    b.HasIndex("SpsaCaseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentPaymentId");

                    b.HasIndex("TeacherPaymentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.EduCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EduCategories");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.EduStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EduStatuses");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EduCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EduCategoryId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.EducationPeriodRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("PeriodId", "EducationId")
                        .IsUnique();

                    b.ToTable("EducationPeriodRates");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.OpkvalSupervision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HoursSought")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualificationHoursSpent")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupervisionHoursSpent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OpkvalSupervisions");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.SpsaCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AppliedPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CourseDescriptionReceived")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DiagnosisId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EduCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EduStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoursSought")
                        .HasColumnType("int");

                    b.Property<int>("HoursSpent")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LatestReapplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OpkvalSupervisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SpsaCaseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StudentRefundReleased")
                        .HasColumnType("bit");

                    b.Property<decimal>("SupportRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SupportTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupportingTeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TeacherRefundReleased")
                        .HasColumnType("bit");

                    b.Property<bool>("TimesheetReceived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppliedPeriodId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("EduCategoryId");

                    b.HasIndex("EduStatusId");

                    b.HasIndex("OpkvalSupervisionId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentPaymentId");

                    b.HasIndex("SupportTypeId");

                    b.HasIndex("SupportingTeacherId");

                    b.HasIndex("TeacherPaymentId");

                    b.ToTable("SpsaCases");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPRNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StartPeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("StartPeriodId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.StudentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CompleteVoucherText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalVoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupportTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupportTypeId");

                    b.ToTable("StudentPayments");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.SupportType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupportTypes");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.SupportingTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("PlacesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlacesId");

                    b.ToTable("SupportingTeachers");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.TeacherPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CompleteVoucherText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalVoucherNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupportTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoucherText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SupportTypeId");

                    b.ToTable("TeacherPayments");
                });

            modelBuilder.Entity("sps.Domain.Model.ValueObjects.SensitiveString", b =>
                {
                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Value");

                    b.ToTable("SensitiveString");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Comment", b =>
                {
                    b.HasOne("sps.Domain.Model.Entities.OpkvalSupervision", "OpkvalSupervision")
                        .WithMany("Comments")
                        .HasForeignKey("OpkvalSupervisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sps.Domain.Model.Entities.SpsaCase", "SpsaCase")
                        .WithMany("Comments")
                        .HasForeignKey("SpsaCaseId");

                    b.HasOne("sps.Domain.Model.Entities.Student", "Student")
                        .WithMany("Comments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sps.Domain.Model.Entities.StudentPayment", "StudentPayment")
                        .WithMany("Comments")
                        .HasForeignKey("StudentPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sps.Domain.Model.Entities.TeacherPayment", "TeacherPayment")
                        .WithMany("Comments")
                        .HasForeignKey("TeacherPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OpkvalSupervision");

                    b.Navigation("SpsaCase");

                    b.Navigation("Student");

                    b.Navigation("StudentPayment");

                    b.Navigation("TeacherPayment");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Education", b =>
                {
                    b.HasOne("sps.Domain.Model.Entities.EduCategory", "EduCategory")
                        .WithMany("Educations")
                        .HasForeignKey("EduCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EduCategory");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.EducationPeriodRate", b =>
                {
                    b.HasOne("sps.Domain.Model.Entities.Education", "Education")
                        .WithMany("EducationPeriodRates")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sps.Domain.Model.Entities.Period", "Period")
                        .WithMany("EducationPeriodRates")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.SpsaCase", b =>
                {
                    b.HasOne("sps.Domain.Model.Entities.Period", "AppliedPeriod")
                        .WithMany("SpsaCases")
                        .HasForeignKey("AppliedPeriodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("sps.Domain.Model.Entities.Diagnosis", "Diagnosis")
                        .WithMany("SpsaCases")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("sps.Domain.Model.Entities.EduCategory", "EduCategory")
                        .WithMany("SpsaCases")
                        .HasForeignKey("EduCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("sps.Domain.Model.Entities.EduStatus", "EduStatus")
                        .WithMany("SpsaCases")
                        .HasForeignKey("EduStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("sps.Domain.Model.Entities.OpkvalSupervision", "OpkvalSupervision")
                        .WithMany("SpsaCases")
                        .HasForeignKey("OpkvalSupervisionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("sps.Domain.Model.Entities.Student", "Student")
                        .WithMany("SpsaCases")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sps.Domain.Model.Entities.StudentPayment", "StudentPayment")
                        .WithMany("SpsaCases")
                        .HasForeignKey("StudentPaymentId");

                    b.HasOne("sps.Domain.Model.Entities.SupportType", "SupportType")
                        .WithMany("SpsaCases")
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("sps.Domain.Model.Entities.SupportingTeacher", "SupportingTeacher")
                        .WithMany("SpsaCases")
                        .HasForeignKey("SupportingTeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("sps.Domain.Model.Entities.TeacherPayment", "TeacherPayment")
                        .WithMany("SpsaCases")
                        .HasForeignKey("TeacherPaymentId");

                    b.Navigation("AppliedPeriod");

                    b.Navigation("Diagnosis");

                    b.Navigation("EduCategory");

                    b.Navigation("EduStatus");

                    b.Navigation("OpkvalSupervision");

                    b.Navigation("Student");

                    b.Navigation("StudentPayment");

                    b.Navigation("SupportType");

                    b.Navigation("SupportingTeacher");

                    b.Navigation("TeacherPayment");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Student", b =>
                {
                    b.HasOne("sps.Domain.Model.Entities.Education", "Education")
                        .WithMany("Students")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("sps.Domain.Model.Entities.Period", "StartPeriod")
                        .WithMany("Students")
                        .HasForeignKey("StartPeriodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Education");

                    b.Navigation("StartPeriod");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.StudentPayment", b =>
                {
                    b.HasOne("sps.Domain.Model.Entities.SupportType", "SupportType")
                        .WithMany("StudentPayments")
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SupportType");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.SupportingTeacher", b =>
                {
                    b.HasOne("sps.Domain.Model.Entities.Place", "Place")
                        .WithMany("SupportingTeachers")
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Place");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.TeacherPayment", b =>
                {
                    b.HasOne("sps.Domain.Model.Entities.SupportType", "SupportType")
                        .WithMany("TeacherPayments")
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SupportType");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Diagnosis", b =>
                {
                    b.Navigation("SpsaCases");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.EduCategory", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("SpsaCases");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.EduStatus", b =>
                {
                    b.Navigation("SpsaCases");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Education", b =>
                {
                    b.Navigation("EducationPeriodRates");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.OpkvalSupervision", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SpsaCases");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Period", b =>
                {
                    b.Navigation("EducationPeriodRates");

                    b.Navigation("SpsaCases");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Place", b =>
                {
                    b.Navigation("SupportingTeachers");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.SpsaCase", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.Student", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SpsaCases");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.StudentPayment", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SpsaCases");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.SupportType", b =>
                {
                    b.Navigation("SpsaCases");

                    b.Navigation("StudentPayments");

                    b.Navigation("TeacherPayments");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.SupportingTeacher", b =>
                {
                    b.Navigation("SpsaCases");
                });

            modelBuilder.Entity("sps.Domain.Model.Entities.TeacherPayment", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SpsaCases");
                });
#pragma warning restore 612, 618
        }
    }
}
